package com.test.excel

import android.content.ContentValues
import android.content.Context
import android.os.Build
import android.os.Environment
import android.provider.MediaStore
import android.util.Log
import android.widget.Toast
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.test.excel.model.SampleData
import dagger.hilt.android.lifecycle.HiltViewModel
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Sheet
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.xssf.usermodel.XSSFWorkbook
import java.io.File
import javax.inject.Inject

@HiltViewModel
class MainViewModel @Inject constructor(
    @ApplicationContext private val context: Context
): ViewModel() {
    private val list = SampleData.countriesAndCapitals

    private val _excel = MutableStateFlow<Workbook?>(null)
    val excel = _excel.asStateFlow()

    /**
     * ÏïàÎìúÎ°úÏù¥Îìú 29Ïù¥ÏÉÅ Î∂ÄÌÑ∞Îäî Scoped Storage Ï†ïÏ±ÖÏùÑ Îî∞Î¶Ñ
     */
    fun saveExcel() {
        viewModelScope.launch {
            createExcel()
            val excel = _excel.value ?: return@launch

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                val contentValues = ContentValues().apply {
                    put(MediaStore.Files.FileColumns.DISPLAY_NAME, "countries.xlsx")
                    put(MediaStore.Files.FileColumns.MIME_TYPE, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                    put(MediaStore.Files.FileColumns.RELATIVE_PATH, Environment.DIRECTORY_DOCUMENTS)
                }

                val uri = context.contentResolver.insert(MediaStore.Files.getContentUri("external"), contentValues)
                uri?.let {
                    runCatching {
                        context.contentResolver.openOutputStream(it)?.use { outputStream ->
                            excel.write(outputStream)
                        }
                    }.onSuccess {
                        Toast.makeText(context, "Ï†ÄÏû• ÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                    }.onFailure {
                        Toast.makeText(context, "Ï†ÄÏû•Ïù¥ Ïã§Ìå® ÌïòÏòÄÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                        Log.e("MainViewModel", "error: ${it.message}")
                    }
                }
            } else {
                val file = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS), "countries.xlsx")

                runCatching {
                    file.outputStream().use { outputStream ->
                        excel.write(outputStream)
                    }
                }.onSuccess {
                    Toast.makeText(context, "Ï†ÄÏû• ÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }.onFailure {
                    Log.e("MainViewModel", "error: ${it.message}")
                    Toast.makeText(context, "Ï†ÄÏû•Ïù¥ Ïã§Ìå® ÌïòÏòÄÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    fun shareExcel() {

    }

    fun readExcel() {

    }

    private fun createExcel() {
        val workbook: Workbook = XSSFWorkbook() // XLSX Ìè¨Îß∑ ÏÇ¨Ïö©
        val sheet: Sheet = workbook.createSheet("countrySheet") // ÏãúÌä∏ Ïù¥Î¶Ñ Ï∂îÍ∞Ä

        // üöÄ Ï≤´ Î≤àÏß∏ Ìñâ(0Î≤à Ìñâ)Ïóê Ìó§Îçî Ï∂îÍ∞Ä
        val headerRow: Row = sheet.createRow(0) // Ï≤´ Î≤àÏß∏ Ìñâ ÏÉùÏÑ±
        headerRow.createCell(0).setCellValue("ÎÇòÎùº") // Ï≤´ Î≤àÏß∏ Ïó¥
        headerRow.createCell(1).setCellValue("ÏàòÎèÑ") // Îëê Î≤àÏß∏ Ïó¥

        list.forEachIndexed { index, pair ->
            val row: Row = sheet.createRow(index + 1) // 1Î≤à ÌñâÎ∂ÄÌÑ∞ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•

            row.createCell(0).setCellValue(pair.first) // ÎÇòÎùº Îç∞Ïù¥ÌÑ∞
            row.createCell(1).setCellValue(pair.second) // ÏàòÎèÑ Îç∞Ïù¥ÌÑ∞
        }

        _excel.update { workbook }
    }
}